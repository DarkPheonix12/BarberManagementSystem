import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import pandas as pd
import time
from requests.exceptions import ConnectionError
from google.auth.exceptions import TransportError

def retry_on_exception(retries=3, delay=2, exceptions=(ConnectionError, TransportError)):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for attempt in range(retries):
                try:
                    return func(*args, **kwargs)
                except exceptions as e:
                    if attempt < retries - 1:
                        time.sleep(delay)
                    else:
                        st.error(f"Failed after {retries} attempts: {e}")
                        raise e
        return wrapper
    return decorator

def authenticate_google_sheets():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    json_path = "your-credentials.json"

    if not os.path.exists(json_path):
        st.error(f"Credentials file not found at {json_path}. Please check the path and filename.")
        st.stop()

    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name(json_path, scope)
        client = gspread.authorize(creds)
    except Exception as e:
        st.error(f"Error loading or authorizing credentials: {e}")
        st.stop()

    return client

def connect_to_sheet(spreadsheet_id, sheet_index=0):
    client = authenticate_google_sheets()
    
    try:
        spreadsheet = client.open_by_key(spreadsheet_id)
        sheet = spreadsheet.get_worksheet(sheet_index)
    except gspread.SpreadsheetNotFound:
        st.error("Spreadsheet not found. Please check the Spreadsheet ID and ensure the service account has access.")
        st.stop()
    except Exception as e:
        st.error(f"An error occurred while opening the spreadsheet: {e}")
        st.stop()

    return sheet

def normalize_phone_number(phone):
    phone = ''.join(filter(str.isdigit, phone))
    if len(phone) == 10:
        return f"+91{phone}"
    elif len(phone) == 12 and phone.startswith("91"):
        return f"+{phone}"
    return phone

@retry_on_exception(retries=3, delay=2)
def fetch_payouts(sheet, referred_phone):
    normalized_referred_phone = normalize_phone_number(referred_phone)
    records = sheet.get_all_records()
    total_unpaid = 0
    total_paid = 0
    unpaid_entries = []
    paid_entries = []

    for idx, record in enumerate(records):
        referred_by = normalize_phone_number(str(record.get('Referred By', '')).strip())
        payout_status = str(record.get('Payout Status', '')).strip().lower()
        payout_value = record.get('Payout', 0) or 0

        if referred_by == normalized_referred_phone:
            if payout_status == "unpaid":
                total_unpaid += payout_value
                unpaid_entries.append((idx + 2, record))
            elif payout_status == "paid":
                total_paid += payout_value
                paid_entries.append((idx + 2, record))

    return total_unpaid, total_paid, unpaid_entries, paid_entries

@retry_on_exception(retries=3, delay=2)
def update_single_cell(sheet, row, col, value):
    """Update a single cell in the sheet."""
    try:
        sheet.update_cell(row, col, value)
        return True
    except Exception as e:
        st.error(f"Error updating cell: {str(e)}")
        return False

@retry_on_exception(retries=3, delay=2)
def update_payout_status(sheet, matched_entries, new_status):
    if not matched_entries:
        return False

    try:
        # Find the column index for 'Payout Status'
        headers = sheet.row_values(1)
        status_col = None
        for idx, header in enumerate(headers, 1):
            if header == 'Payout Status':
                status_col = idx
                break

        if status_col is None:
            st.error("Could not find 'Payout Status' column")
            return False

        success_count = 0
        for row_idx, _ in matched_entries:
            # Update each cell individually
            if update_single_cell(sheet, row_idx, status_col, new_status):
                success_count += 1
            time.sleep(0.5)  # Add delay between updates to avoid rate limits

        if success_count > 0:
            st.success(f"Successfully updated {success_count} entries to {new_status}")
            return True
        else:
            st.warning("No entries were updated")
            return False

    except Exception as e:
        st.error(f"Error in update_payout_status: {str(e)}")
        return False

def app():
    st.title("Payout Management")

    referred_phone = st.text_input("Enter Referred Phone Number")

    if st.button("Get Payout"):
        if not referred_phone:
            st.error("Please enter a phone number.")
            return

        spreadsheet_id = "1xUWgXbyIUWeEtZ3WcPKrgUbF-yH_ZCPH8PbPvtvqJsU"
        sheet = connect_to_sheet(spreadsheet_id)

        try:
            total_unpaid, total_paid, unpaid_entries, paid_entries = fetch_payouts(sheet, referred_phone)
        except (ConnectionError, TransportError) as e:
            st.error(f"Connection error while fetching payouts: {e}")
            return

        if total_unpaid > 0 or total_paid > 0:
            st.success(f"Total Unpaid Payout for {referred_phone}: ₹{total_unpaid}")
            st.success(f"Total Paid Payout for {referred_phone}: ₹{total_paid}")

            st.subheader("Unpaid Entries:")
            if unpaid_entries:
                df_unpaid = pd.DataFrame([entry[1] for entry in unpaid_entries])
                st.dataframe(df_unpaid)
            else:
                st.write("No unpaid entries found.")

            st.subheader("Paid Entries:")
            if paid_entries:
                df_paid = pd.DataFrame([entry[1] for entry in paid_entries])
                st.dataframe(df_paid)
            else:
                st.write("No paid entries found.")

            if unpaid_entries:
                with st.form("update_form"):
                    st.write("Update the status of unpaid entries:")
                    new_status = st.selectbox("Update Unpaid Status to:", ["Paid", "Unpaid"])
                    
                    submit_button = st.form_submit_button("Update Status")
                    if submit_button:
                        st.info("Updating payout status... Please wait.")
                        if update_payout_status(sheet, unpaid_entries, new_status):
                            time.sleep(2)  # Give time for updates to propagate
                            st.experimental_rerun()

        else:
            st.write(f"No entries found for {referred_phone}.")

if __name__ == "__main__":
    app()